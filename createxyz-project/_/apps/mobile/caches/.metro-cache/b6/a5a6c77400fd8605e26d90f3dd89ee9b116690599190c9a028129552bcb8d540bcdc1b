{"dependencies":[{"name":"./Host","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":602},"end":{"line":4,"column":64,"index":666}}],"key":"BQhWeBRDaUSxZaA5iU6wGzQsFFs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"JsiSkTypefaceFontProvider\", {\n    enumerable: true,\n    get: function () {\n      return JsiSkTypefaceFontProvider;\n    }\n  });\n  var _Host = require(_dependencyMap[0], \"./Host\");\n  function _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[r] = t, e;\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  class JsiSkTypefaceFontProvider extends _Host.HostObject {\n    constructor(CanvasKit, ref) {\n      super(CanvasKit, ref, \"FontMgr\");\n      _defineProperty(this, \"allocatedPointers\", []);\n    }\n    matchFamilyStyle(_name, _style) {\n      return (0, _Host.throwNotImplementedOnRNWeb)();\n    }\n    countFamilies() {\n      return this.ref.countFamilies();\n    }\n    getFamilyName(index) {\n      return this.ref.getFamilyName(index);\n    }\n    registerFont(typeface, familyName) {\n      const strLen = lengthBytesUTF8(familyName) + 1;\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      const strPtr = this.CanvasKit._malloc(strLen);\n      stringToUTF8(this.CanvasKit, familyName, strPtr, strLen);\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this.ref._registerFont(typeface.ref, strPtr);\n    }\n    dispose() {\n      for (const ptr of this.allocatedPointers) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        this.CanvasKit._free(ptr);\n      }\n      this.ref.delete();\n    }\n  }\n  const lengthBytesUTF8 = str => {\n    // TextEncoder will give us the byte length in UTF8 form\n    const encoder = new TextEncoder();\n    const utf8 = encoder.encode(str);\n    return utf8.length;\n  };\n  const stringToUTF8 = (CanvasKit, str, outPtr, maxBytesToWrite) => {\n    // TextEncoder will give us the byte array in UTF8 form\n    const encoder = new TextEncoder();\n    const utf8 = encoder.encode(str);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    const heap = CanvasKit.HEAPU8;\n\n    // Check if there's enough space\n    if (utf8.length > maxBytesToWrite) {\n      throw new Error(\"Not enough space to write UTF8 encoded string\");\n    }\n\n    // Copy the bytes\n    for (let i = 0; i < utf8.length; i++) {\n      heap[outPtr + i] = utf8[i];\n    }\n\n    // Null terminate\n    if (utf8.length < maxBytesToWrite) {\n      heap[outPtr + utf8.length] = 0;\n    }\n  };\n});","lineCount":100,"map":[[7,2,5,0,"Object"],[7,8,5,0],[7,9,5,0,"defineProperty"],[7,23,5,0],[7,24,5,0,"exports"],[7,31,5,0],[8,4,5,0,"enumerable"],[8,14,5,0],[9,4,5,0,"get"],[9,7,5,0],[9,18,5,0,"get"],[9,19,5,0],[10,6,5,0],[10,13,5,0,"JsiSkTypefaceFontProvider"],[10,38,5,0],[11,4,5,0],[12,2,5,0],[13,2,4,0],[13,6,4,0,"_Host"],[13,11,4,0],[13,14,4,0,"require"],[13,21,4,0],[13,22,4,0,"_dependencyMap"],[13,36,4,0],[14,2,1,0],[14,11,1,9,"_defineProperty"],[14,26,1,24,"_defineProperty"],[14,27,1,25,"e"],[14,28,1,26],[14,30,1,28,"r"],[14,31,1,29],[14,33,1,31,"t"],[14,34,1,32],[14,36,1,34],[15,4,1,36],[15,11,1,43],[15,12,1,44,"r"],[15,13,1,45],[15,16,1,48,"_toPropertyKey"],[15,30,1,62],[15,31,1,63,"r"],[15,32,1,64],[15,33,1,65],[15,38,1,70,"e"],[15,39,1,71],[15,42,1,74,"Object"],[15,48,1,80],[15,49,1,81,"defineProperty"],[15,63,1,95],[15,64,1,96,"e"],[15,65,1,97],[15,67,1,99,"r"],[15,68,1,100],[15,70,1,102],[16,6,1,104,"value"],[16,11,1,109],[16,13,1,111,"t"],[16,14,1,112],[17,6,1,114,"enumerable"],[17,16,1,124],[17,18,1,126],[17,19,1,127],[17,20,1,128],[18,6,1,130,"configurable"],[18,18,1,142],[18,20,1,144],[18,21,1,145],[18,22,1,146],[19,6,1,148,"writable"],[19,14,1,156],[19,16,1,158],[19,17,1,159],[20,4,1,161],[20,5,1,162],[20,6,1,163],[20,9,1,166,"e"],[20,10,1,167],[20,11,1,168,"r"],[20,12,1,169],[20,13,1,170],[20,16,1,173,"t"],[20,17,1,174],[20,19,1,176,"e"],[20,20,1,177],[21,2,1,179],[22,2,2,0],[22,11,2,9,"_toPropertyKey"],[22,25,2,23,"_toPropertyKey"],[22,26,2,24,"t"],[22,27,2,25],[22,29,2,27],[23,4,2,29],[23,8,2,33,"i"],[23,9,2,34],[23,12,2,37,"_toPrimitive"],[23,24,2,49],[23,25,2,50,"t"],[23,26,2,51],[23,28,2,53],[23,36,2,61],[23,37,2,62],[24,4,2,64],[24,11,2,71],[24,19,2,79],[24,23,2,83],[24,30,2,90,"i"],[24,31,2,91],[24,34,2,94,"i"],[24,35,2,95],[24,38,2,98,"i"],[24,39,2,99],[24,42,2,102],[24,44,2,104],[25,2,2,106],[26,2,3,0],[26,11,3,9,"_toPrimitive"],[26,23,3,21,"_toPrimitive"],[26,24,3,22,"t"],[26,25,3,23],[26,27,3,25,"r"],[26,28,3,26],[26,30,3,28],[27,4,3,30],[27,8,3,34],[27,16,3,42],[27,20,3,46],[27,27,3,53,"t"],[27,28,3,54],[27,32,3,58],[27,33,3,59,"t"],[27,34,3,60],[27,36,3,62],[27,43,3,69,"t"],[27,44,3,70],[28,4,3,72],[28,8,3,76,"e"],[28,9,3,77],[28,12,3,80,"t"],[28,13,3,81],[28,14,3,82,"Symbol"],[28,20,3,88],[28,21,3,89,"toPrimitive"],[28,32,3,100],[28,33,3,101],[29,4,3,103],[29,8,3,107],[29,13,3,112],[29,14,3,113],[29,19,3,118,"e"],[29,20,3,119],[29,22,3,121],[30,6,3,123],[30,10,3,127,"i"],[30,11,3,128],[30,14,3,131,"e"],[30,15,3,132],[30,16,3,133,"call"],[30,20,3,137],[30,21,3,138,"t"],[30,22,3,139],[30,24,3,141,"r"],[30,25,3,142],[30,29,3,146],[30,38,3,155],[30,39,3,156],[31,6,3,158],[31,10,3,162],[31,18,3,170],[31,22,3,174],[31,29,3,181,"i"],[31,30,3,182],[31,32,3,184],[31,39,3,191,"i"],[31,40,3,192],[32,6,3,194],[32,12,3,200],[32,16,3,204,"TypeError"],[32,25,3,213],[32,26,3,214],[32,72,3,260],[32,73,3,261],[33,4,3,263],[34,4,3,265],[34,11,3,272],[34,12,3,273],[34,20,3,281],[34,25,3,286,"r"],[34,26,3,287],[34,29,3,290,"String"],[34,35,3,296],[34,38,3,299,"Number"],[34,44,3,305],[34,46,3,307,"t"],[34,47,3,308],[34,48,3,309],[35,2,3,311],[36,2,5,7],[36,8,5,13,"JsiSkTypefaceFontProvider"],[36,33,5,38],[36,42,5,47,"HostObject"],[36,47,5,57],[36,48,5,57,"HostObject"],[36,58,5,57],[36,59,5,58],[37,4,6,2,"constructor"],[37,15,6,13,"constructor"],[37,16,6,14,"CanvasKit"],[37,25,6,23],[37,27,6,25,"ref"],[37,30,6,28],[37,32,6,30],[38,6,7,4],[38,11,7,9],[38,12,7,10,"CanvasKit"],[38,21,7,19],[38,23,7,21,"ref"],[38,26,7,24],[38,28,7,26],[38,37,7,35],[38,38,7,36],[39,6,8,4,"_defineProperty"],[39,21,8,19],[39,22,8,20],[39,26,8,24],[39,28,8,26],[39,47,8,45],[39,49,8,47],[39,51,8,49],[39,52,8,50],[40,4,9,2],[41,4,10,2,"matchFamilyStyle"],[41,20,10,18,"matchFamilyStyle"],[41,21,10,19,"_name"],[41,26,10,24],[41,28,10,26,"_style"],[41,34,10,32],[41,36,10,34],[42,6,11,4],[42,13,11,11],[42,17,11,11,"throwNotImplementedOnRNWeb"],[42,22,11,37],[42,23,11,37,"throwNotImplementedOnRNWeb"],[42,49,11,37],[42,51,11,38],[42,52,11,39],[43,4,12,2],[44,4,13,2,"countFamilies"],[44,17,13,15,"countFamilies"],[44,18,13,15],[44,20,13,18],[45,6,14,4],[45,13,14,11],[45,17,14,15],[45,18,14,16,"ref"],[45,21,14,19],[45,22,14,20,"countFamilies"],[45,35,14,33],[45,36,14,34],[45,37,14,35],[46,4,15,2],[47,4,16,2,"getFamilyName"],[47,17,16,15,"getFamilyName"],[47,18,16,16,"index"],[47,23,16,21],[47,25,16,23],[48,6,17,4],[48,13,17,11],[48,17,17,15],[48,18,17,16,"ref"],[48,21,17,19],[48,22,17,20,"getFamilyName"],[48,35,17,33],[48,36,17,34,"index"],[48,41,17,39],[48,42,17,40],[49,4,18,2],[50,4,19,2,"registerFont"],[50,16,19,14,"registerFont"],[50,17,19,15,"typeface"],[50,25,19,23],[50,27,19,25,"familyName"],[50,37,19,35],[50,39,19,37],[51,6,20,4],[51,12,20,10,"strLen"],[51,18,20,16],[51,21,20,19,"lengthBytesUTF8"],[51,36,20,34],[51,37,20,35,"familyName"],[51,47,20,45],[51,48,20,46],[51,51,20,49],[51,52,20,50],[53,6,22,4],[54,6,23,4],[55,6,24,4],[55,12,24,10,"strPtr"],[55,18,24,16],[55,21,24,19],[55,25,24,23],[55,26,24,24,"CanvasKit"],[55,35,24,33],[55,36,24,34,"_malloc"],[55,43,24,41],[55,44,24,42,"strLen"],[55,50,24,48],[55,51,24,49],[56,6,25,4,"stringToUTF8"],[56,18,25,16],[56,19,25,17],[56,23,25,21],[56,24,25,22,"CanvasKit"],[56,33,25,31],[56,35,25,33,"familyName"],[56,45,25,43],[56,47,25,45,"strPtr"],[56,53,25,51],[56,55,25,53,"strLen"],[56,61,25,59],[56,62,25,60],[58,6,27,4],[59,6,28,4],[60,6,29,4],[60,10,29,8],[60,11,29,9,"ref"],[60,14,29,12],[60,15,29,13,"_registerFont"],[60,28,29,26],[60,29,29,27,"typeface"],[60,37,29,35],[60,38,29,36,"ref"],[60,41,29,39],[60,43,29,41,"strPtr"],[60,49,29,47],[60,50,29,48],[61,4,30,2],[62,4,31,2,"dispose"],[62,11,31,9,"dispose"],[62,12,31,9],[62,14,31,12],[63,6,32,4],[63,11,32,9],[63,17,32,15,"ptr"],[63,20,32,18],[63,24,32,22],[63,28,32,26],[63,29,32,27,"allocatedPointers"],[63,46,32,44],[63,48,32,46],[64,8,33,6],[65,8,34,6],[66,8,35,6],[66,12,35,10],[66,13,35,11,"CanvasKit"],[66,22,35,20],[66,23,35,21,"_free"],[66,28,35,26],[66,29,35,27,"ptr"],[66,32,35,30],[66,33,35,31],[67,6,36,4],[68,6,37,4],[68,10,37,8],[68,11,37,9,"ref"],[68,14,37,12],[68,15,37,13,"delete"],[68,21,37,19],[68,22,37,20],[68,23,37,21],[69,4,38,2],[70,2,39,0],[71,2,40,0],[71,8,40,6,"lengthBytesUTF8"],[71,23,40,21],[71,26,40,24,"str"],[71,29,40,27],[71,33,40,31],[72,4,41,2],[73,4,42,2],[73,10,42,8,"encoder"],[73,17,42,15],[73,20,42,18],[73,24,42,22,"TextEncoder"],[73,35,42,33],[73,36,42,34],[73,37,42,35],[74,4,43,2],[74,10,43,8,"utf8"],[74,14,43,12],[74,17,43,15,"encoder"],[74,24,43,22],[74,25,43,23,"encode"],[74,31,43,29],[74,32,43,30,"str"],[74,35,43,33],[74,36,43,34],[75,4,44,2],[75,11,44,9,"utf8"],[75,15,44,13],[75,16,44,14,"length"],[75,22,44,20],[76,2,45,0],[76,3,45,1],[77,2,46,0],[77,8,46,6,"stringToUTF8"],[77,20,46,18],[77,23,46,21,"stringToUTF8"],[77,24,46,22,"CanvasKit"],[77,33,46,31],[77,35,46,33,"str"],[77,38,46,36],[77,40,46,38,"outPtr"],[77,46,46,44],[77,48,46,46,"maxBytesToWrite"],[77,63,46,61],[77,68,46,66],[78,4,47,2],[79,4,48,2],[79,10,48,8,"encoder"],[79,17,48,15],[79,20,48,18],[79,24,48,22,"TextEncoder"],[79,35,48,33],[79,36,48,34],[79,37,48,35],[80,4,49,2],[80,10,49,8,"utf8"],[80,14,49,12],[80,17,49,15,"encoder"],[80,24,49,22],[80,25,49,23,"encode"],[80,31,49,29],[80,32,49,30,"str"],[80,35,49,33],[80,36,49,34],[81,4,50,2],[82,4,51,2],[83,4,52,2],[83,10,52,8,"heap"],[83,14,52,12],[83,17,52,15,"CanvasKit"],[83,26,52,24],[83,27,52,25,"HEAPU8"],[83,33,52,31],[85,4,54,2],[86,4,55,2],[86,8,55,6,"utf8"],[86,12,55,10],[86,13,55,11,"length"],[86,19,55,17],[86,22,55,20,"maxBytesToWrite"],[86,37,55,35],[86,39,55,37],[87,6,56,4],[87,12,56,10],[87,16,56,14,"Error"],[87,21,56,19],[87,22,56,20],[87,69,56,67],[87,70,56,68],[88,4,57,2],[90,4,59,2],[91,4,60,2],[91,9,60,7],[91,13,60,11,"i"],[91,14,60,12],[91,17,60,15],[91,18,60,16],[91,20,60,18,"i"],[91,21,60,19],[91,24,60,22,"utf8"],[91,28,60,26],[91,29,60,27,"length"],[91,35,60,33],[91,37,60,35,"i"],[91,38,60,36],[91,40,60,38],[91,42,60,40],[92,6,61,4,"heap"],[92,10,61,8],[92,11,61,9,"outPtr"],[92,17,61,15],[92,20,61,18,"i"],[92,21,61,19],[92,22,61,20],[92,25,61,23,"utf8"],[92,29,61,27],[92,30,61,28,"i"],[92,31,61,29],[92,32,61,30],[93,4,62,2],[95,4,64,2],[96,4,65,2],[96,8,65,6,"utf8"],[96,12,65,10],[96,13,65,11,"length"],[96,19,65,17],[96,22,65,20,"maxBytesToWrite"],[96,37,65,35],[96,39,65,37],[97,6,66,4,"heap"],[97,10,66,8],[97,11,66,9,"outPtr"],[97,17,66,15],[97,20,66,18,"utf8"],[97,24,66,22],[97,25,66,23,"length"],[97,31,66,29],[97,32,66,30],[97,35,66,33],[97,36,66,34],[98,4,67,2],[99,2,68,0],[99,3,68,1],[100,0,68,2],[100,3]],"functionMap":{"names":["_defineProperty","<global>","_toPropertyKey","_toPrimitive","JsiSkTypefaceFontProvider","constructor","matchFamilyStyle","countFamilies","getFamilyName","registerFont","dispose","lengthBytesUTF8","stringToUTF8"],"mappings":"AAA,oLC;ACC,2GD;AEC,wTF;OGE;ECC;GDG;EEC;GFE;EGC;GHE;EIC;GJE;EKC;GLW;EMC;GNO;CHC;wBUC;CVK;qBWC;CXsB"},"hasCjsExports":false},"type":"js/module"}]}